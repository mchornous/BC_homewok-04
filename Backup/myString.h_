/* Create your own string class (don't use the standard one).
Overload next operators (and more if needed) : "=", "+", "+=", "<<", ">>", "==", "!="
Among the standard function-members also add copy constructor and next functions:
append
compare
length
resize
clear
swap
substr //should search for a specified substring into existing one and return position of the 1st character
insert //means inserting one character or another string into a specified position
*/
#ifndef MYSTRING_H

#define MYSTRING_H


#include <iostream>
#include <cassert>

using namespace std;

class myString
{
    size_t size;
    size_t bufferLength;
//        char * buffer;
    void init();
    size_t assign_new_size (size_t minimum_to_allocate)
    {
        return minimum_to_allocate * 2;
    }

public:
    char * buffer;
    myString();
    myString(const myString &);
    myString(const char *);
    ~myString();
    int length() const;
    void clear ();

    char& operator[] (unsigned int);
    void operator=(const myString&);
//const string & operator = ( const string & copy );
    void operator+(const myString&);

//        void resize(unsigned int, char);
    void resize(size_t newSize );
//       void insert(unsigned int, myString&);
    const char *  getBuffer( ) const
    {
        return buffer;
    };
//       std::string getBuffer( );// const { return buffer;};
    // Return string allocated size
    size_t getBufferLength( ) const
    {
        return ( bufferLength ) ? bufferLength : 0;
    }

    myString& append(  const myString & str, size_t len );
//       void insert( size_t start, const char *str, size_t len );
    void insert( size_t start, const myString & str, size_t len );
    int compare(const myString& right) const;
//		myString clear
    void swap(myString& strA, myString& strB);
///        string substr( size_t start, size_t len) const;
    int substr(myString& sub_str);

    void operator += (const myString&);

    // other methods
    friend bool operator+=(const myString &, const myString &);
    friend bool operator<=(const myString &, const myString &);	//?
    friend bool operator<(const myString &, const myString &);	//?
    friend ostream & operator<<(ostream &, const myString &);
    friend istream & operator>>(istream &, const myString &);
    friend bool operator==(const myString &, const myString &);
    friend bool operator!=(const myString &, const myString &);
};
#endif
